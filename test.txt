import os
from moviepy.editor import VideoFileClip

def convert_to_mp3(input_file, output_file):
    video_clip = VideoFileClip(input_file)
    audio_clip = video_clip.audio
    audio_clip.write_audiofile(output_file)
    audio_clip.close()
    video_clip.close()

def batch_convert_to_mp3(input_folder, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for file_name in os.listdir(input_folder):
        if file_name.endswith(".mp4"):
            input_file_path = os.path.join(input_folder, file_name)
            output_file_path = os.path.join(output_folder, f"{os.path.splitext(file_name)[0]}.mp3")
            convert_to_mp3(input_file_path, output_file_path)
            print(f"Konvertiere {file_name} zu {os.path.basename(output_file_path)}")

if __name__ == "__main__":
    input_folder = input("Gib den Pfad des Ordners mit den MP4-Dateien ein: ")
    output_folder = input("Gib den Pfad des Ausgabeordners für MP3-Dateien ein: ")

    batch_convert_to_mp3(input_folder, output_folder)

------------------------------------------------------------------------
import socket


# Zielsystem und Portbereich festlegen
ziel_system = "localhost"  # Hier das Zielsystem angeben (z.B., IP-Adresse oder Hostname)
start_port = 1
end_port = 1024  # Sie können den Portbereich anpassen, je nachdem, welche Ports Sie überprüfen möchten

# Ergebnisse in eine Textdatei schreiben
with open("offene_ports.txt", "w") as f:
    for port in range(start_port, end_port + 1):
        try:
            # Versuche, eine Verbindung zum Port herzustellen
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)  # Setze eine Timeout-Zeit für den Verbindungsversuch
                result = s.connect_ex((ziel_system, port))
                if result == 0:
                    f.write(f"Port {port} ist offen.\n")
        except Exception as e:
            pass  # Fehler ignorieren und zum nächsten Port gehen

print("Offene Ports wurden in 'offene_ports.txt' dokumentiert.")


# python
@echo off
powershell -Command "& { iwr 'https://www.python.org/ftp/python/3.11.4/python-3.11.4-amd64.exe' -OutFile 'python-3.11.4-amd64.exe' }"
python-3.11.4-amd64.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0 InstallLauncherAllUsers=1 TargetDir=%USERPROFILE%\Python3114
setx path "%PATH%;%USERPROFILE%\Python3114;%USERPROFILE%\Python3114\Scripts" /M

# vscode

@echo off
powershell -Command "& { iwr 'https://aka.ms/win32-x64-user-stable' -OutFile 'VSCodeSetup.exe' }"
VSCodeSetup.exe /verysilent /mergetasks=!runcode


import socket
import os
import threading

server_ip = '100.202.38.100'
server_port = 34582
buffer = 1024
sep = "#SEP#"
client_id = 110


def listen_messanges(s):
    while True:
        try:
            # Nachricht vom Server empfangen
            message = s.recv(1024).decode('utf-8')

            # Wenn keine Nachricht empfangen wird, hat der Server die Verbindung geschlossen
            print(f"Nachricht vom Server: {message}")

            my_string = "ping"
            if my_string in message:
                ignorieren = True
            else:
                print(f"Nachricht vom Server: {message}")

        except Exception as e:
            print(f"Fehler beim Empfangen der Nachricht vom Server: {e}")
            break


def main():
    while True:
        # Socket-Verbindung herstellen
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server_ip, server_port))
        s.sendall(client_id.to_bytes(4, byteorder='big'))  # Hier werden int-Daten in Bytes umgewandelt

        print("Name:", client_id)
        print("1. Datei senden")
        print("2. Nachricht senden")
        print("3. Beenden")
        print("4. Show incomming Messanges")
        choice = input("Wähle eine Option: ")
        s.send(choice.encode('utf-8'))

        if choice == '1':
            # send file
            file = input("Dateipfad eingeben: ")

            if sep in file:
                print("WARNUNG! UNGÜLTIGER DATEINAME!")
                exit(-1)

            file_size = os.path.getsize(file)
            s.send(f"{file}{sep}{file_size}".encode())

            with open(file, "rb") as f:
                while True:
                    file_bytes = f.read(buffer)
                    if not file_bytes:
                        break
                    s.sendall(file_bytes)
            print(f"Datei '{file}' gesendet.")
            s.close()

        elif choice == '2':
            # Nachricht senden
            message = input("Nachricht eingeben: ")
            s.send(message.encode('utf-8'))

        elif choice == '3':
            break

        elif choice == '4':
            client_thread = threading.Thread(target=listen_messanges, args=(s,))  # client_socket
            client_thread.start()
            listen_messanges(s)

        else:
            print("Ungültige Option")

    s.close()


if __name__ == '__main__':
    main()

"""
import socket
import os


class Client:
    def __init__(self, server_ip, server_port, buffer=1024, sep="#SEP#", client_id=100):
        self.server_ip = server_ip
        self.server_port = server_port
        self.buffer = buffer
        self.sep = sep
        self.client_id = client_id
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def connect_to_server(self):
        self.socket.connect((self.server_ip, self.server_port))
        self.send_client_id()

    def send_client_id(self):
        self.socket.sendall(self.client_id.to_bytes(4, byteorder='big'))

    def send_option(self, option):
        self.socket.send(option.encode('utf-8'))

    def send_file(self, file_path):
        self.socket.sendall(f"{file_path}{self.sep}{os.path.getsize(file_path)}".encode())
        with open(file_path, "rb") as f:
            while True:
                file_bytes = f.read(self.buffer)
                if not file_bytes:
                    break
                self.socket.sendall(file_bytes)
        print(f"Datei '{file_path}' gesendet.")

    def send_message(self, message):
        self.socket.send(message.encode('utf-8'))

    def close_connection(self):
        self.socket.close()


def main():
    client = Client(server_ip='192.168.14.2', server_port=34582)

    try:
        client.connect_to_server()

        while True:
            print("Name:", client.client_id)
            print("1. Datei senden")
            print("2. Nachricht senden")
            print("3. Beenden")
            choice = input("Wähle eine Option: ")

            client.send_option(choice)

            if choice == '1':
                # Datei senden
                file_path = input("Dateipfad eingeben: ")
                if client.sep in file_path:
                    print("WARNUNG! UNGÜLTIGER DATEINAME!")
                    exit(-1)
                client.send_file(file_path)

            elif choice == '2':
                # Nachricht senden
                message = input("Nachricht eingeben: ")
                client.send_message(message)

            elif choice == '3':
                break

            else:
                print("Ungültige Option")

    finally:
        client.close_connection()


if __name__ == '__main__':
    main()
"""
